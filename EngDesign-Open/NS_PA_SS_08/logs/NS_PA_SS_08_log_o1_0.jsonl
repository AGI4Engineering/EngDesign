{'completion_tokens': 1187, 'response': Response_structure(reasoning='Here is a straightforward, fully synchronous SystemVerilog module that implements the required target-sequence detector. It uses a shift register, a register to hold the target pattern, and a comparator to generate the one-cycle “seen” pulse.', code="module model #(\n    parameter TARGET_WIDTH = 5\n) (\n    input  logic               clk,     // clock signal\n    input  logic               resetn,  // synchronous, active-low reset\n    input  logic [TARGET_WIDTH-1:0] init,// target sequence, loaded on reset\n    input  logic               din,     // serial input bit\n    output logic               seen     // pulses high for one cycle on match\n);\n\n    // Internal registers\n    logic [TARGET_WIDTH-1:0] target_reg; // Holds the target pattern\n    logic [TARGET_WIDTH-1:0] shift_reg;  // Shift register for incoming bits\n\n    always_ff @(posedge clk) begin\n        if (!resetn) begin\n            // On active-low reset:\n            // 1) Clear the shift register (so old bits are forgotten)\n            // 2) Load the target_reg from init (zero-extended as needed)\n            // 3) Drive seen low\n            shift_reg  <= '0;\n            target_reg <= init; // automatically zero-padded from left if init is narrower\n            seen       <= 1'b0;\n        end else begin\n            // When reset is deasserted:\n            // 1) Shift in the new 'din' bit\n            // 2) Compare the new contents with target_reg\n            // 3) If they match, set seen=1 for one clock cycle; otherwise seen=0\n            shift_reg <= {shift_reg[TARGET_WIDTH-2:0], din};\n            seen      <= (shift_reg == target_reg);\n        end\n    end\n\nendmodule"), 'passed': False, 'evaluation_result': {'test0_pass': True, 'test1_pass': False, 'test2_pass': False}, 'score': 30}
