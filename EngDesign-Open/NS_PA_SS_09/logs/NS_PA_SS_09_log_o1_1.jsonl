{'completion_tokens': 1135, 'response': Response_structure(reasoning='Below is a clean, commented, and fully synthesizable SystemVerilog module implementing the specified N-bit Gray-to-binary conversion. The logic is purely combinational, with no clock or reset, and it uses an always_comb block with a for loop to cascade the XOR operations from the most significant bit down to the least significant bit.', code='`timescale 1ns / 1ps\n\nmodule model #(\n    parameter WIDTH = 8\n) (\n    input  logic [WIDTH-1:0] gray,          // N-bit Gray code input\n    output logic [WIDTH-1:0] bin           // N-bit binary index output\n);\n\n    //======================================================================\n    // Combinational logic to convert N-bit Gray code to binary.\n    // According to the Gray-to-binary formula:\n    //   bin[WIDTH-1] = gray[WIDTH-1]\n    //   bin[i]       = bin[i+1] ^ gray[i], for i = WIDTH-2 down to 0\n    //======================================================================\n    always_comb begin\n        // Assign the most significant bit directly\n        bin[WIDTH-1] = gray[WIDTH-1];\n        \n        // For the remaining bits, cascade XOR operations\n        for (int i = WIDTH-2; i >= 0; i--) begin\n            bin[i] = bin[i+1] ^ gray[i];\n        end\n    end\n\nendmodule // model\n'), 'passed': True, 'evaluation_result': {'test0_pass': True, 'test1_pass': True, 'test2_pass': True}, 'score': 100}
