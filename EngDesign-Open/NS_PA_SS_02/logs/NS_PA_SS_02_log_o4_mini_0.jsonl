{'completion_tokens': 1234, 'response': Response_structure(reasoning='We need to produce a parameterizable n-bit Gray code generator in SystemVerilog named “model” with the interface given (clk, synchronous active-low reset, parameter DATA_WIDTH). On each rising edge, when resetn is low we clear the register to zero; otherwise we advance to the next Gray code value. The simplest way is to maintain an internal binary counter, increment it each clock, then compute Gray code as binary ^ (binary >> 1). We pack both the counter and output in a single always_ff block for clarity. The code below meets the interface requirements and starts from zero after reset.', code="module model #(\n    parameter int DATA_WIDTH = 4\n) (\n    input  logic                  clk,\n    input  logic                  resetn,\n    output logic [DATA_WIDTH-1:0] out\n);\n\n    // Internal binary counter\n    logic [DATA_WIDTH-1:0] bin_cnt;\n\n    // Synchronous active-low reset, Gray code generation\n    always_ff @(posedge clk) begin\n        if (!resetn) begin\n            bin_cnt <= '0;\n            out     <= '0;\n        end else begin\n            // Increment binary counter\n            bin_cnt <= bin_cnt + 1;\n            // Compute next Gray code: G = B ^ (B >> 1)\n            out     <= (bin_cnt + 1) ^ ((bin_cnt + 1) >> 1);\n        end\n    end\n\nendmodule"), 'passed': True, 'evaluation_result': {'test0_pass': True, 'test1_pass': True, 'test2_pass': True}, 'score': 100}
