{'completion_tokens': 300, 'response': Response_structure(reasoning='The task is to implement a parameterizable Gray-code sequence generator in SystemVerilog. The module `model` takes a clock `clk`, an active-low reset `resetn`, and a parameter `DATA_WIDTH`. The output `out` is an n-bit Gray code, where n is `DATA_WIDTH`. The Gray code should start from zero after a synchronous reset and increment on each rising edge of the clock. The Gray code is generated using the formula: gray = binary ^ (binary >> 1). A binary counter is implemented, and then converted to Gray code. A reset condition initializes the counter to zero.', code='module model #(parameter\n  DATA_WIDTH = 4\n) (\n  input clk,\n  input resetn,\n  output logic [DATA_WIDTH-1:0] out\n);\n\n  logic [DATA_WIDTH-1:0] bin_count;\n\n  always_ff @(posedge clk) begin\n    if (!resetn) begin\n      bin_count <= 0;\n    end else begin\n      bin_count <= bin_count + 1;\n    end\n  end\n\n  always_comb begin\n    out = bin_count ^ (bin_count >> 1);\n  end\n\nendmodule'), 'passed': True, 'evaluation_result': {'test0_pass': True, 'test1_pass': True, 'test2_pass': True}, 'score': 100}
