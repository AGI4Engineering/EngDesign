{'completion_tokens': 1743, 'response': Response_structure(reasoning='The provided image appears to have mixed noise: scattered salt-and-pepper artifacts (some pixels abruptly set to very bright or very dark values), as well as colorful speckled noise typical of Gaussian or similar additive noise. This combination suggests we need multiple steps: first, a median filter to handle the salt-and-pepper outliers, then a non-local means method to further reduce the remaining color noise while preserving edges and fine detail.', config=ConfigFile(denoising_strategy='Step 1: Remove salt-and-pepper artifacts using a median filter. Step 2: Reduce color-based Gaussian-like noise with fast non-local means denoising.', filter_sequence=['median(ksize=3)', 'fastNlMeansDenoisingColored(h=10, hColor=10, templateWindowSize=7, searchWindowSize=21)'], function_code='def denoise_image(noisy_img):\n    import cv2\n    import numpy as np\n\n    # Step 1: Apply a median filter to reduce salt-and-pepper noise\n    # We use kernel size of 3 to carefully remove outlier pixels\n    median_filtered = cv2.medianBlur(noisy_img, 3)\n\n    # Step 2: Use fast non-local means for colored images to reduce remaining Gaussian-like noise\n    # Parameters:\n    #   h (luminance filter strength): 10\n    #   hColor (color filter strength): 10\n    #   templateWindowSize: 7\n    #   searchWindowSize: 21\n    filtered_img = cv2.fastNlMeansDenoisingColored(\n        median_filtered, None, 10, 10, 7, 21\n    )\n\n    return filtered_img\n')), 'passed': True, 'evaluation_result': {'strategy': 'Step 1: Remove salt-and-pepper artifacts using a median filter. Step 2: Reduce color-based Gaussian-like noise with fast non-local means denoising.', 'score': {'mse': 35.276997884114586, 'psnr': 30.074221471251064}, 'denoising function': 'def denoise_image(noisy_img):\n    import cv2\n    import numpy as np\n\n    # Step 1: Apply a median filter to reduce salt-and-pepper noise\n    # We use kernel size of 3 to carefully remove outlier pixels\n    median_filtered = cv2.medianBlur(noisy_img, 3)\n\n    # Step 2: Use fast non-local means for colored images to reduce remaining Gaussian-like noise\n    # Parameters:\n    #   h (luminance filter strength): 10\n    #   hColor (color filter strength): 10\n    #   templateWindowSize: 7\n    #   searchWindowSize: 21\n    filtered_img = cv2.fastNlMeansDenoisingColored(\n        median_filtered, None, 10, 10, 7, 21\n    )\n\n    return filtered_img\n'}, 'score': 74.72323022653894}
