{'completion_tokens': 2075, 'response': Response_structure(reasoning='1. Visual inspection shows dense, randomly-coloured single–pixel dots scattered over the whole image.  These bright / dark spikes overwrite the true intensity rather than slightly shifting it, a signature of impulse (a.k.a. salt-&-pepper) noise.  There is no clear low-frequency grain that would indicate strong additive Gaussian noise.\n2. The classical filter for impulse noise is the median filter because it replaces each pixel with a statistic that is insensitive to outliers while still preserving edges reasonably well.  A small 3×3 kernel suffices for most spikes and keeps blurring minimal.\n3. After the median pass a faint residual chromatic noise and slight staircase artefacts can remain.  A second, edge-preserving smoother that averages only among similar patches – Non-Local Means (OpenCV’s fastNlMeansDenoisingColored) – further suppresses the leftover noise while maintaining fine details and colour fidelity.\n4. Pipeline chosen:\n   • median(ksize=3)  → knock out the high-energy impulse pixels.\n   • fastNlMeansDenoisingColored(h=10, hColor=10, templateWindowSize=7, searchWindowSize=21)  → remove remaining low-amplitude noise, keep edges.\n5. Parameters were selected from practical experience: h≈10 gives a good balance between smoothing and detail retention for 8-bit images; template/search windows are the OpenCV defaults that work well in most cases.\n6. The resulting function returns a standard H×W×3 uint8 image, directly usable by cv2.imwrite.', config=ConfigFile(denoising_strategy='Heavy colour salt-&-pepper impulse noise detected.  Strategy: first eliminate the spikes with a 3×3 median filter, then apply fast Non-Local Means to clean residual chromatic/low-level noise while preserving edges and texture.', filter_sequence=['median(ksize=3)', 'fastNlMeansDenoisingColored(h=10, hColor=10, templateWindowSize=7, searchWindowSize=21)'], function_code='def denoise_image(noisy_img):\n    """\n    Apply a two-stage denoising pipeline:\n    1) 3×3 median filter → removes strong impulse (salt-&-pepper) noise.\n    2) fast non-local means (colour) → suppresses residual noise, keeps edges.\n\n    Parameters\n    ----------\n    noisy_img : np.ndarray, uint8, shape (H,W,3)\n        BGR image loaded with OpenCV.\n\n    Returns\n    -------\n    filtered_img : np.ndarray, uint8, shape (H,W,3)\n    """\n    import cv2\n    import numpy as np\n\n    # Safety: make sure we work on uint8 copy\n    img = noisy_img.copy()\n    if img.dtype != np.uint8:\n        img = np.clip(img, 0, 255).astype(np.uint8)\n\n    # 1. Median filter (3×3)\n    stage1 = cv2.medianBlur(img, 3)\n\n    # 2. Non-Local Means denoising (colour)\n    filtered_img = cv2.fastNlMeansDenoisingColored(stage1, None,\n                                                   h=10,           # strength for luminance\n                                                   hColor=10,      # strength for colour channels\n                                                   templateWindowSize=7,\n                                                   searchWindowSize=21)\n\n    return filtered_img\n')), 'passed': True, 'evaluation_result': {'strategy': 'Heavy colour salt-&-pepper impulse noise detected.  Strategy: first eliminate the spikes with a 3×3 median filter, then apply fast Non-Local Means to clean residual chromatic/low-level noise while preserving edges and texture.', 'score': {'mse': 35.276997884114586, 'psnr': 30.074221471251064}, 'denoising function': 'def denoise_image(noisy_img):\n    """\n    Apply a two-stage denoising pipeline:\n    1) 3×3 median filter → removes strong impulse (salt-&-pepper) noise.\n    2) fast non-local means (colour) → suppresses residual noise, keeps edges.\n\n    Parameters\n    ----------\n    noisy_img : np.ndarray, uint8, shape (H,W,3)\n        BGR image loaded with OpenCV.\n\n    Returns\n    -------\n    filtered_img : np.ndarray, uint8, shape (H,W,3)\n    """\n    import cv2\n    import numpy as np\n\n    # Safety: make sure we work on uint8 copy\n    img = noisy_img.copy()\n    if img.dtype != np.uint8:\n        img = np.clip(img, 0, 255).astype(np.uint8)\n\n    # 1. Median filter (3×3)\n    stage1 = cv2.medianBlur(img, 3)\n\n    # 2. Non-Local Means denoising (colour)\n    filtered_img = cv2.fastNlMeansDenoisingColored(stage1, None,\n                                                   h=10,           # strength for luminance\n                                                   hColor=10,      # strength for colour channels\n                                                   templateWindowSize=7,\n                                                   searchWindowSize=21)\n\n    return filtered_img\n'}, 'score': 74.72323022653894}
