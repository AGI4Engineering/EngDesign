{'completion_tokens': 2009, 'response': Response_structure(reasoning='Step 1: Noise Analysis\n- The input is a 3-channel color image with heavy random colored speckles. These speckles are characteristic of two types of degradation:\n  1. Impulse (salt-and-pepper) noise—isolated pixels with extreme values in random colors.\n  2. Colored Gaussian-like noise—fine‐grain multichannel variations.\n\nStep 2: Filtering Strategy\n- Impulse noise is best removed by a median filter, which replaces each pixel with the median of its neighborhood and effectively removes outlier pixels without blurring edges too much.\n- Remaining Gaussian/color noise can be addressed by a non‐local means approach (OpenCV’s fastNlMeansDenoisingColored), which averages pixels with similar neighborhoods across the image, preserving texture and edges while reducing colored noise.\n\nStep 3: Filter Sequence and Parameters\n1. medianBlur(ksize=3)  → 3×3 median filter to knock out salt-and-pepper speckles.\n2. fastNlMeansDenoisingColored(h=10, hColor=10, templateWindowSize=7, searchWindowSize=21)  → non-local means with moderate filtering strength on luminance (h) and chrominance (hColor), 7×7 template patches, and 21×21 search windows.\n\nStep 4: Executable Code\nBelow is a single Python function implementing the above pipeline using OpenCV. It reads a noisy color image (`noisy_img`), applies the median filter, then the non‐local means denoiser, and returns `filtered_img`.', config=ConfigFile(denoising_strategy='Detected a mixture of impulse (salt-and-pepper) and colored Gaussian noise. First apply a 3×3 median filter to remove impulse speckles, then use OpenCV’s fastNlMeansDenoisingColored to reduce colored Gaussian noise while preserving edges and texture.', filter_sequence=['medianBlur(ksize=3)', 'fastNlMeansDenoisingColored(h=10, hColor=10, templateWindowSize=7, searchWindowSize=21)'], function_code='def denoise_image(noisy_img):\n    """\n    Denoise a color image corrupted by impulse and colored Gaussian noise.\n    1. Median blur to remove salt-and-pepper noise.\n    2. Non-local means to reduce colored Gaussian noise.\n    """\n    # Step 1: Remove impulse (salt-and-pepper) noise\n    med = cv2.medianBlur(noisy_img, 3)\n\n    # Step 2: Remove colored Gaussian noise while preserving details\n    # h: filter strength for luminance, hColor: filter strength for color components\n    filtered_img = cv2.fastNlMeansDenoisingColored(\n        med,\n        None,\n        h=10,\n        hColor=10,\n        templateWindowSize=7,\n        searchWindowSize=21\n    )\n\n    return filtered_img')), 'passed': True, 'evaluation_result': {'strategy': 'Detected a mixture of impulse (salt-and-pepper) and colored Gaussian noise. First apply a 3×3 median filter to remove impulse speckles, then use OpenCV’s fastNlMeansDenoisingColored to reduce colored Gaussian noise while preserving edges and texture.', 'score': {'mse': 35.276997884114586, 'psnr': 30.074221471251064}, 'denoising function': 'def denoise_image(noisy_img):\n    """\n    Denoise a color image corrupted by impulse and colored Gaussian noise.\n    1. Median blur to remove salt-and-pepper noise.\n    2. Non-local means to reduce colored Gaussian noise.\n    """\n    # Step 1: Remove impulse (salt-and-pepper) noise\n    med = cv2.medianBlur(noisy_img, 3)\n\n    # Step 2: Remove colored Gaussian noise while preserving details\n    # h: filter strength for luminance, hColor: filter strength for color components\n    filtered_img = cv2.fastNlMeansDenoisingColored(\n        med,\n        None,\n        h=10,\n        hColor=10,\n        templateWindowSize=7,\n        searchWindowSize=21\n    )\n\n    return filtered_img'}, 'score': 74.72323022653894}
