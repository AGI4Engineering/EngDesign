{'completion_tokens': 1221, 'response': Response_structure(reasoning='To create a one-cycle bubble-sort module in SystemVerilog, we need to follow these steps:\n1. Define the module with the specified parameters and ports.\n2. Implement an internal memory of depth 8 to store incoming data when sortit is low.\n3. When sortit is high, perform a bubble sort on the stored data in one clock cycle.\n4. Output the sorted data in descending order with an optional valid flag.\n5. Handle reset conditions to clear memory and set output to zero.\n\nThe bubble sort will be unrolled into a series of compare-and-swap operations that execute in parallel within a single clock cycle. This is achieved using generate-for loops to create the necessary logic for each stage of the bubble sort.', code="module model #(\n    parameter BITWIDTH = 8\n) (\n    input  logic [BITWIDTH-1:0]       din,     // unsigned input word\n    input  logic                      sortit,  // start new sort when asserted\n    input  logic                      clk,     // clock\n    input  logic                      resetn,  // synchronous, active-low reset\n    output logic [8*BITWIDTH+1-1:0]   dout     // concatenated sorted vector + valid bit\n);\n\n    // Internal memory to store 8 elements\n    logic [BITWIDTH-1:0] memory [0:7];\n    logic [BITWIDTH-1:0] sorted [0:7];\n    \n    always_ff @(posedge clk) begin\n        if (!resetn) begin\n            // Reset condition: clear memory and set output to zero\n            for (int i = 0; i < 8; i++) begin\n                memory[i] <= '0;\n            end\n            dout <= '0;\n        end else begin\n            if (!sortit) begin\n                // Data capture: shift in new data while sortit is low\n                for (int i = 7; i > 0; i--) begin\n                    memory[i] <= memory[i-1];\n                end\n                memory[0] <= din;\n                dout <= '0;\n            end else begin\n                // Sort trigger: perform bubble sort in one cycle\n                // Copy memory to sorted array\n                for (int i = 0; i < 8; i++) begin\n                    sorted[i] = memory[i];\n                end\n                \n                // Unrolled bubble sort (8 elements require 7 stages)\n                // Stage 1\n                for (int i = 0; i < 7; i++) begin\n                    if (sorted[i] < sorted[i+1]) begin\n                        logic [BITWIDTH-1:0] temp = sorted[i];\n                        sorted[i] = sorted[i+1];\n                        sorted[i+1] = temp;\n                    end\n                end\n                \n                // Stage 2\n                for (int i = 0; i < 6; i++) begin\n                    if (sorted[i] < sorted[i+1]) begin\n                        logic [BITWIDTH-1:0] temp = sorted[i];\n                        sorted[i] = sorted[i+1];\n                        sorted[i+1] = temp;\n                    end\n                end\n                \n                // Stage 3\n                for (int i = 0; i < 5; i++) begin\n                    if (sorted[i] < sorted[i+1]) begin\n                        logic [BITWIDTH-1:0] temp = sorted[i];\n                        sorted[i] = sorted[i+1];\n                        sorted[i+1] = temp;\n                    end\n                end\n                \n                // Stage 4\n                for (int i = 0; i < 4; i++) begin\n                    if (sorted[i] < sorted[i+1]) begin\n                        logic [BITWIDTH-1:0] temp = sorted[i];\n                        sorted[i] = sorted[i+1];\n                        sorted[i+1] = temp;\n                    end\n                end\n                \n                // Stage 5\n                for (int i = 0; i < 3; i++) begin\n                    if (sorted[i] < sorted[i+1]) begin\n                        logic [BITWIDTH-1:0] temp = sorted[i];\n                        sorted[i] = sorted[i+1];\n                        sorted[i+1] = temp;\n                    end\n                end\n                \n                // Stage 6\n                for (int i = 0; i < 2; i++) begin\n                    if (sorted[i] < sorted[i+1]) begin\n                        logic [BITWIDTH-1:0] temp = sorted[i];\n                        sorted[i] = sorted[i+1];\n                        sorted[i+1] = temp;\n                    end\n                end\n                \n                // Stage 7\n                if (sorted[0] < sorted[1]) begin\n                    logic [BITWIDTH-1:0] temp = sorted[0];\n                    sorted[0] = sorted[1];\n                    sorted[1] = temp;\n                end\n                \n                // Concatenate sorted array with valid bit\n                dout <= {1'b1, sorted[7], sorted[6], sorted[5], sorted[4], \n                         sorted[3], sorted[2], sorted[1], sorted[0]};\n            end\n        end\n    end\n\nendmodule"), 'passed': False, 'evaluation_result': {'test0_pass': True, 'test1_pass': False, 'test2_pass': False}, 'score': 30}
