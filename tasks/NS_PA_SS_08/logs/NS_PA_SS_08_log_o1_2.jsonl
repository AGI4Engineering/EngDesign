{'completion_tokens': 1602, 'response': Response_structure(reasoning='Below is a complete, synthesizable SystemVerilog module named “model” that detects a 5-bit (or parameterizable) target pattern in a serial input stream. It includes synchronous, active-low reset behavior, shift register, target register, and generates a one-cycle “seen” pulse whenever the shifted bits match the target. Overlapping matches are allowed, and shorter init values are automatically zero-padded on the high side by virtue of SystemVerilog’s parameter sizing rules.', code="`timescale 1ns/1ps\n\nmodule model #(\n    parameter TARGET_WIDTH = 5\n) (\n    input  logic               clk,     // clock signal\n    input  logic               resetn,  // synchronous, active-low reset\n    input  logic [TARGET_WIDTH-1:0] init, // target sequence loaded on reset\n    input  logic               din,     // serial input bit\n    output logic               seen     // pulses high for one clock upon match\n);\n\n    // Internal state registers\n    logic [TARGET_WIDTH-1:0] target_reg; // Holds the target pattern\n    logic [TARGET_WIDTH-1:0] shift_reg;  // Tracks the last TARGET_WIDTH bits\n\n    // Synchronous logic: active-low, synchronous reset\n    always_ff @(posedge clk) begin\n        if (!resetn) begin\n            // When resetn == 0 (active-low):\n            //   1) Load the init pattern into target_reg\n            //   2) Clear the shift register\n            //   3) Deassert the seen output\n            target_reg <= init;      // Zero-padding occurs automatically if init is narrower\n            shift_reg  <= '0;        // Clear the shift register\n            seen       <= 1'b0;      // No match detection on reset\n        end\n        else begin\n            // Normal operation: shift in the incoming bit\n            shift_reg <= {shift_reg[TARGET_WIDTH-2:0], din};\n\n            // Compare shifted bits with target\n            if (shift_reg == target_reg) begin\n                // If the shift register matches the target, raise seen for one clock\n                seen <= 1'b1;\n            end\n            else begin\n                seen <= 1'b0;\n            end\n        end\n    end\n\nendmodule\n"), 'passed': False, 'evaluation_result': {'test0_pass': True, 'test1_pass': False, 'test2_pass': False}, 'score': 30}
