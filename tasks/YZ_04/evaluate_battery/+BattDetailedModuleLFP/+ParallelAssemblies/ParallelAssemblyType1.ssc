component ParallelAssemblyType1
    % ParallelAssemblyType1:2
    % Parallel Assembly Block
    %    Model resolution: Detailed
    %    Number of cells: 3
    %
    %
    %    Inter-cell heat transfer: on
    %    Number of inter-cell thermal connections: 2
    %
    %    MATLAB version: 24.1
    %    Simscape Battery version: 24.1
    %    Simscape code generated on: 12-Dec-2023 17:42:13

    parameters
        SOC_vecCell = {[0, .1, .25, .5, .75, .9, 1],'1'}; % Vector of state-of-charge values, SOC
        SOC_vecCellPercentDeviation = zeros([3 1]); % Percent deviation for SOC_vecCell
        T_vecCell = {[278, 293, 313],'K'}; % Vector of temperatures, T
        T_vecCellPercentDeviation = zeros([3 1]); % Percent deviation for T_vecCell
        V0_matCell = {[3.49, 3.5, 3.51; 3.55, 3.57, 3.56; 3.62, 3.63, 3.64; 3.71, 3.71, 3.72; 3.91, 3.93, 3.94; 4.07, 4.08, 4.08; 4.19, 4.19, 4.19],'V'}; % Open-circuit voltage, V0(SOC,T)
        V0_matCellPercentDeviation = zeros([3 1]); % Percent deviation for V0_matCell
        V_rangeCell = {[0, inf],'V'}; % Terminal voltage operating range [Min Max]
        V_rangeCellPercentDeviation = zeros([3 1]); % Percent deviation for V_rangeCell
        R0_dis_matCell = {[.0117, .0085, .009; .011, .0085, .009; .0114, .0087, .0092; .0107, .0082, .0088; .0107, .0083, .0091; .0113, .0085, .0089; .0116, .0085, .0089],'Ohm'}; % Terminal resistance during discharging, R0(SOC,T)
        R0_dis_matCellPercentDeviation = zeros([3 1]); % Percent deviation for R0_dis_matCell
        R0_ch_matCell = {[.0117, .0085, .009; .011, .0085, .009; .0114, .0087, .0092; .0107, .0082, .0088; .0107, .0083, .0091; .0113, .0085, .0089; .0116, .0085, .0089],'Ohm'}; % Terminal resistance during charging, R0(SOC,T)
        R0_ch_matCellPercentDeviation = zeros([3 1]); % Percent deviation for R0_ch_matCell
        AHCell = {27,'A*hr'}; % Cell capacity, AH
        AHCellPercentDeviation = zeros([3 1]); % Percent deviation for AHCell
        extrapolation_optionCell = {simscape.enum.extrapolation.nearest,'1'}; % Extrapolation method for all tables
        R1_matCell = {[.0109, .0029, .0013; .0069, .0024, .0012; .0047, .0026, .0013; .0034, .0016, .001; .0033, .0023, .0014; .0033, .0018, .0011; .0028, .0017, .0011],'Ohm'}; % First polarization resistance, R1(SOC,T)
        R1_matCellPercentDeviation = zeros([3 1]); % Percent deviation for R1_matCell
        tau1_matCell = {[20, 36, 39; 31, 45, 39; 109, 105, 61; 36, 29, 26; 59, 77, 67; 40, 33, 29; 25, 39, 33],'s'}; % First time constant, tau1(SOC,T)
        tau1_matCellPercentDeviation = zeros([3 1]); % Percent deviation for tau1_matCell
        R2_matCell = {[.0109, .0029, .0013; .0069, .0024, .0012; .0047, .0026, .0013; .0034, .0016, .001; .0033, .0023, .0014; .0033, .0018, .0011; .0028, .0017, .0011],'Ohm'}; % Second polarization resistance, R2(SOC,T)
        R2_matCellPercentDeviation = zeros([3 1]); % Percent deviation for R2_matCell
        tau2_matCell = {[20, 36, 39; 31, 45, 39; 109, 105, 61; 36, 29, 26; 59, 77, 67; 40, 33, 29; 25, 39, 33],'s'}; % Second time constant, tau2(SOC,T)
        tau2_matCellPercentDeviation = zeros([3 1]); % Percent deviation for tau2_matCell
        thermal_massCell = {100,'J/K'}; % Thermal mass
        thermal_massCellPercentDeviation = zeros([3 1]); % Percent deviation for thermal_massCell
        InterCellThermalResistance = {1,'K/W'}; % Inter-cell thermal path resistance
    end

    parameters(ExternalAccess=none)
        P = 3; % Batteries in Parallel
        NumInterCellThermalConnections = 2; % Number of inter-cell thermal connections
        InterCellConnectionsMapping = [1 2;2 3]; % Cell model to neighbors mapping
    end

    parameters(Access=private)
        InterCellThermalResistanceScaled = InterCellThermalResistance .* ones(1,NumInterCellThermalConnections); % Scaled inter-cell thermal path resistance
    end

    nodes
        p = foundation.electrical.electrical; % +
        n = foundation.electrical.electrical; % -
    end

    variables
        iCell = {repmat(0,3,1),'A'}; % Cell current (positive in)
        vCell = {repmat(0,3,1),'V'}; % Cell terminal voltage
        socCell = {value={repmat(1,3,1),'1'},priority=priority.high}; % Cell state of charge
        numCyclesCell = {value={repmat(0,3,1),'1'},priority=priority.high}; % Cell discharge cycles
        temperatureCell = {value={repmat(298.15,3,1),'K'},priority=priority.high}; % Cell temperature
        vParallelAssembly = {value={0,'V'},priority=priority.none}; % Parallel Assembly Voltage
        socParallelAssembly = {value={1,'1'},priority=priority.none}; % Parallel Assembly state of charge
    end

    equations
        assert(length(iCell) == P);
        assert(length(vCell) == P);
        assert(length(socCell) == P);
        assert(length(numCyclesCell) == P);
        assert(length(temperatureCell) == P);
        assert(length(vParallelAssembly) == 1);
        assert(length(socParallelAssembly) == 1);
        assert(isequal(size(InterCellThermalResistance),[1,1]) || isequal(size(InterCellThermalResistance),[1,NumInterCellThermalConnections]),...
            'Inter-cell thermal path resistance must be either a scalar or a row vector. The size of this vector must be equal to the number of inter-cell thermal connections modeled by the block');
        vParallelAssembly == Cell1(1).p.v - Cell1(1).n.v;
        socParallelAssembly == sum([Cell1.stateOfCharge])/P;
        assert(isValidPercentDeviationSize(SOC_vecCellPercentDeviation,SOC_vecCell,P),...
            'Percent deviation for SOC_vecCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(T_vecCellPercentDeviation,T_vecCell,P),...
            'Percent deviation for T_vecCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(V0_matCellPercentDeviation,V0_matCell,P),...
            'Percent deviation for V0_matCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(V_rangeCellPercentDeviation,V_rangeCell,P),...
            'Percent deviation for V_rangeCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(R0_dis_matCellPercentDeviation,R0_dis_matCell,P),...
            'Percent deviation for R0_dis_matCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(R0_ch_matCellPercentDeviation,R0_ch_matCell,P),...
            'Percent deviation for R0_ch_matCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(AHCellPercentDeviation,AHCell,P),'Percent deviation for AHCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(R1_matCellPercentDeviation,R1_matCell,P),...
            'Percent deviation for R1_matCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(tau1_matCellPercentDeviation,tau1_matCell,P),...
            'Percent deviation for tau1_matCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(R2_matCellPercentDeviation,R2_matCell,P),...
            'Percent deviation for R2_matCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(tau2_matCellPercentDeviation,tau2_matCell,P),...
            'Percent deviation for tau2_matCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(thermal_massCellPercentDeviation,thermal_massCell,P),...
            'Percent deviation for thermal_massCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
    end

    annotations
        [p] : Side=top;
        [n] : Side=bottom;
        [BottomExtClnt] : Side=bottom;
        [InterCellH] : Side=bottom;
        UILayout = [UIGroup("Main",SOC_vecCell,SOC_vecCellPercentDeviation,T_vecCell,T_vecCellPercentDeviation,V0_matCell,V0_matCellPercentDeviation,V_rangeCell,V_rangeCellPercentDeviation,R0_dis_matCell,R0_dis_matCellPercentDeviation,R0_ch_matCell,R0_ch_matCellPercentDeviation,AHCell,AHCellPercentDeviation,extrapolation_optionCell),...
            UIGroup("Dynamics",R1_matCell,R1_matCellPercentDeviation,tau1_matCell,tau1_matCellPercentDeviation,R2_matCell,R2_matCellPercentDeviation,tau2_matCell,tau2_matCellPercentDeviation),...
            UIGroup("Thermal",thermal_massCell,thermal_massCellPercentDeviation,InterCellThermalResistance)];
        Icon = 'parallelAssembly.svg';
    end

    for Pidx = 1:P
        components(ExternalAccess=observe,CompileReuse=true)
            Cell1(Pidx) = batteryecm.table_battery(SOC_vec = applyParameterDeviation(SOC_vecCell,SOC_vecCellPercentDeviation,P,Pidx),...
                T_vec = applyParameterDeviation(T_vecCell,T_vecCellPercentDeviation,P,Pidx),...
                V0_mat = applyParameterDeviation(V0_matCell,V0_matCellPercentDeviation,P,Pidx),...
                V_range = applyParameterDeviation(V_rangeCell,V_rangeCellPercentDeviation,P,Pidx),...
                R0_dis_mat = applyParameterDeviation(R0_dis_matCell,R0_dis_matCellPercentDeviation,P,Pidx),...
                R0_ch_mat = applyParameterDeviation(R0_ch_matCell,R0_ch_matCellPercentDeviation,P,Pidx),...
                AH = applyParameterDeviation(AHCell,AHCellPercentDeviation,P,Pidx),...
                extrapolation_option = extrapolation_optionCell,...
                R1_mat = applyParameterDeviation(R1_matCell,R1_matCellPercentDeviation,P,Pidx),...
                tau1_mat = applyParameterDeviation(tau1_matCell,tau1_matCellPercentDeviation,P,Pidx),...
                R2_mat = applyParameterDeviation(R2_matCell,R2_matCellPercentDeviation,P,Pidx),...
                tau2_mat = applyParameterDeviation(tau2_matCell,tau2_matCellPercentDeviation,P,Pidx),...
                thermal_mass = applyParameterDeviation(thermal_massCell,thermal_massCellPercentDeviation,P,Pidx),...
                T_dependence = simscape.enum.tablebattery.temperature_dependence.yes,prm_age_OCV = simscape.enum.tablebattery.prm_age_OCV.OCV,...
                prm_age_capacity = simscape.enum.tablebattery.prm_age.disabled,...
                prm_age_modeling = simscape.enum.tablebattery.prm_age_modeling.equation,...
                prm_age_resistance = simscape.enum.tablebattery.prm_age.disabled,...
                prm_dir = simscape.enum.tablebattery.prm_dir.currentDirectionality,...
                prm_dyn = simscape.enum.tablebattery.prm_dyn.rc2,...
                prm_fade = simscape.enum.tablebattery.prm_fade.disabled,prm_leak = simscape.enum.tablebattery.prm_leak.disabled,...
                thermal_port = simscape.enum.thermaleffects.model,...
                i.priority = priority.none,v.priority = priority.none,stateOfCharge.priority = priority.none,...
                num_cycles.priority = priority.none,...
                cell_temperature.priority = priority.none);
        end
    end

    for Pidx = 1:P
        connections
            connect(p,Cell1(Pidx).p);
            connect(Cell1(Pidx).n,n);
        end
    end

    for Pidx = 1:P
        equations
            Cell1(Pidx).i == iCell(Pidx);
            Cell1(Pidx).v == vCell(Pidx);
            Cell1(Pidx).stateOfCharge == socCell(Pidx);
            Cell1(Pidx).num_cycles == numCyclesCell(Pidx);
            Cell1(Pidx).cell_temperature == temperatureCell(Pidx);
        end
    end

    for Pidx = 1:P
        nodes
            BottomExtClnt(Pidx) = foundation.thermal.thermal; % CPB
        end
    end

    for Pidx = 1:P
        connections
            connect(Cell1(Pidx).H,BottomExtClnt(Pidx));
        end
    end

    for InterCellThermalResistorsIdx = 1:NumInterCellThermalConnections
        connections
            connect(Cell1(InterCellConnectionsMapping(1,InterCellThermalResistorsIdx)).H,InterCellThermalResistor(InterCellThermalResistorsIdx).A);
            connect(InterCellThermalResistor(InterCellThermalResistorsIdx).B,Cell1(InterCellConnectionsMapping(2,InterCellThermalResistorsIdx)).H);
        end
    end

    for InterCellThermalResistorsIdx = 1:NumInterCellThermalConnections
        components(ExternalAccess=observe)
            InterCellThermalResistor(InterCellThermalResistorsIdx) = foundation.thermal.elements.resistance(...
                resistance = InterCellThermalResistanceScaled(InterCellThermalResistorsIdx));
        end
    end

    for Pidx = 1:P
        nodes
            InterCellH(Pidx) = foundation.thermal.thermal; % ICH
        end
    end

    for Pidx = 1:P
        connections
            connect(Cell1(Pidx).H,InterCellH(Pidx));
        end
    end
end

function cellParameter = applyParameterDeviation(parameter,parameterDeviation,p,pIndex)
    definitions
        parameterDeviationSize=size(parameterDeviation);
        indexedParameterDeviation=parameterDeviation(parameterDeviationSize(1) * (pIndex - 1) / p + 1 : parameterDeviationSize(1) * pIndex / p,:);
        cellParameter=(1 + reshape(indexedParameterDeviation,[parameterDeviationSize(1) / p,parameterDeviationSize(2:end)]) ./ 100) .* parameter;
    end
end

function isValidSize = isValidPercentDeviationSize(percentDeviation,parameter,totalNumModels)
    definitions
        percentDeviationSize=size(percentDeviation);
        parameterSize=size(parameter);
        isScalarPercentDeviation=isequal(percentDeviationSize,[totalNumModels,1]);
        isTrueToSizePercentDeviation=isequal(percentDeviationSize,[parameterSize(1) * totalNumModels,parameterSize(2:end)]);
        isValidSize=isScalarPercentDeviation||isTrueToSizePercentDeviation;
    end
end